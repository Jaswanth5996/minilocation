{"ast":null,"code":"import axios from \"axios\";\nexport const getLocationFromCoords = async (lat, lng) => {\n  try {\n    var _res$data;\n    console.log(`üìç Fetching address for: Latitude: ${lat}, Longitude: ${lng}`);\n\n    // Ensure the API URL is available\n    const apiUrl = process.env.REACT_APP_API_URL || 'http://localhost:5000/api'; // Fallback to local URL if not set\n    const requestUrl = `${apiUrl}/location/reverse`; // Full API URL\n\n    // Log the full API URL for debugging\n    console.log(`üîó Request URL: ${requestUrl}`);\n    const res = await axios.get(requestUrl, {\n      params: {\n        lat,\n        lon: lng\n      }\n    });\n    console.log('üåç Full Response:', res.data);\n    if ((_res$data = res.data) !== null && _res$data !== void 0 && _res$data.address) {\n      const {\n        road,\n        suburb,\n        city,\n        state,\n        country\n      } = res.data.address;\n\n      // Format the address with available components\n      const formattedAddress = [road, suburb, city, state, country].filter(Boolean).join(', ') || 'Address details are incomplete or unavailable.';\n\n      // If any part of the address is available, consider it \"address found\"\n      const addressFound = formattedAddress !== 'Address details are incomplete or unavailable.';\n      console.log(`‚úÖ Address found: ${addressFound}`);\n      console.log(`‚úÖ Full address: ${formattedAddress}`);\n      return {\n        addressFound,\n        formattedAddress\n      };\n    } else {\n      throw new Error('No address found');\n    }\n  } catch (err) {\n    console.error('‚ùå Reverse geocoding failed:', err.message);\n\n    // Handle network errors or other exceptions more specifically\n    if (err.message.includes('Network Error')) {\n      return {\n        addressFound: false,\n        formattedAddress: 'Network error. Please check your connection.'\n      };\n    }\n\n    // Return a fallback message if the geocoding fails\n    return {\n      addressFound: false,\n      formattedAddress: 'Address not found. Could not retrieve location.'\n    };\n  }\n};","map":{"version":3,"names":["axios","getLocationFromCoords","lat","lng","_res$data","console","log","apiUrl","process","env","REACT_APP_API_URL","requestUrl","res","get","params","lon","data","address","road","suburb","city","state","country","formattedAddress","filter","Boolean","join","addressFound","Error","err","error","message","includes"],"sources":["C:/Users/janga divya/OneDrive/Desktop/hihi/src/utils/getLocationFromCoords.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nexport const getLocationFromCoords = async (lat, lng) => {\r\n  try {\r\n    console.log(`üìç Fetching address for: Latitude: ${lat}, Longitude: ${lng}`);\r\n\r\n    // Ensure the API URL is available\r\n    const apiUrl = process.env.REACT_APP_API_URL || 'http://localhost:5000/api'; // Fallback to local URL if not set\r\n    const requestUrl = `${apiUrl}/location/reverse`;  // Full API URL\r\n\r\n    // Log the full API URL for debugging\r\n    console.log(`üîó Request URL: ${requestUrl}`);\r\n\r\n    const res = await axios.get(requestUrl, {\r\n      params: { lat, lon: lng },\r\n    });\r\n\r\n    console.log('üåç Full Response:', res.data);\r\n\r\n    if (res.data?.address) {\r\n      const { road, suburb, city, state, country } = res.data.address;\r\n\r\n      // Format the address with available components\r\n      const formattedAddress = [road, suburb, city, state, country]\r\n        .filter(Boolean)\r\n        .join(', ') || 'Address details are incomplete or unavailable.';\r\n\r\n      // If any part of the address is available, consider it \"address found\"\r\n      const addressFound = formattedAddress !== 'Address details are incomplete or unavailable.';\r\n\r\n      console.log(`‚úÖ Address found: ${addressFound}`);\r\n      console.log(`‚úÖ Full address: ${formattedAddress}`);\r\n\r\n      return { addressFound, formattedAddress };\r\n    } else {\r\n      throw new Error('No address found');\r\n    }\r\n  } catch (err) {\r\n    console.error('‚ùå Reverse geocoding failed:', err.message);\r\n\r\n    // Handle network errors or other exceptions more specifically\r\n    if (err.message.includes('Network Error')) {\r\n      return {\r\n        addressFound: false,\r\n        formattedAddress: 'Network error. Please check your connection.',\r\n      };\r\n    }\r\n\r\n    // Return a fallback message if the geocoding fails\r\n    return {\r\n      addressFound: false,\r\n      formattedAddress: 'Address not found. Could not retrieve location.',\r\n    };\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,qBAAqB,GAAG,MAAAA,CAAOC,GAAG,EAAEC,GAAG,KAAK;EACvD,IAAI;IAAA,IAAAC,SAAA;IACFC,OAAO,CAACC,GAAG,CAAC,sCAAsCJ,GAAG,gBAAgBC,GAAG,EAAE,CAAC;;IAE3E;IACA,MAAMI,MAAM,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B,CAAC,CAAC;IAC7E,MAAMC,UAAU,GAAG,GAAGJ,MAAM,mBAAmB,CAAC,CAAE;;IAElD;IACAF,OAAO,CAACC,GAAG,CAAC,mBAAmBK,UAAU,EAAE,CAAC;IAE5C,MAAMC,GAAG,GAAG,MAAMZ,KAAK,CAACa,GAAG,CAACF,UAAU,EAAE;MACtCG,MAAM,EAAE;QAAEZ,GAAG;QAAEa,GAAG,EAAEZ;MAAI;IAC1B,CAAC,CAAC;IAEFE,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEM,GAAG,CAACI,IAAI,CAAC;IAE1C,KAAAZ,SAAA,GAAIQ,GAAG,CAACI,IAAI,cAAAZ,SAAA,eAARA,SAAA,CAAUa,OAAO,EAAE;MACrB,MAAM;QAAEC,IAAI;QAAEC,MAAM;QAAEC,IAAI;QAAEC,KAAK;QAAEC;MAAQ,CAAC,GAAGV,GAAG,CAACI,IAAI,CAACC,OAAO;;MAE/D;MACA,MAAMM,gBAAgB,GAAG,CAACL,IAAI,EAAEC,MAAM,EAAEC,IAAI,EAAEC,KAAK,EAAEC,OAAO,CAAC,CAC1DE,MAAM,CAACC,OAAO,CAAC,CACfC,IAAI,CAAC,IAAI,CAAC,IAAI,gDAAgD;;MAEjE;MACA,MAAMC,YAAY,GAAGJ,gBAAgB,KAAK,gDAAgD;MAE1FlB,OAAO,CAACC,GAAG,CAAC,oBAAoBqB,YAAY,EAAE,CAAC;MAC/CtB,OAAO,CAACC,GAAG,CAAC,mBAAmBiB,gBAAgB,EAAE,CAAC;MAElD,OAAO;QAAEI,YAAY;QAAEJ;MAAiB,CAAC;IAC3C,CAAC,MAAM;MACL,MAAM,IAAIK,KAAK,CAAC,kBAAkB,CAAC;IACrC;EACF,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZxB,OAAO,CAACyB,KAAK,CAAC,6BAA6B,EAAED,GAAG,CAACE,OAAO,CAAC;;IAEzD;IACA,IAAIF,GAAG,CAACE,OAAO,CAACC,QAAQ,CAAC,eAAe,CAAC,EAAE;MACzC,OAAO;QACLL,YAAY,EAAE,KAAK;QACnBJ,gBAAgB,EAAE;MACpB,CAAC;IACH;;IAEA;IACA,OAAO;MACLI,YAAY,EAAE,KAAK;MACnBJ,gBAAgB,EAAE;IACpB,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}