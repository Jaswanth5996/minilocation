{"ast":null,"code":"import axios from 'axios';\nexport const getLocationFromCoords = async (lat, lng) => {\n  try {\n    var _res$data;\n    console.log(`üìç Fetching address for: Latitude: ${lat}, Longitude: ${lng}`);\n\n    // Adjusted URL based on the correct API URL in the environment variable\n    const res = await axios.get(`${process.env.REACT_APP_API_URL}/api/reverse`, {\n      params: {\n        lat,\n        lon: lng\n      }\n    });\n    console.log('üåç Full Response:', res.data);\n\n    // Check if address exists\n    if ((_res$data = res.data) !== null && _res$data !== void 0 && _res$data.address) {\n      const {\n        road,\n        suburb,\n        city,\n        state,\n        country\n      } = res.data.address;\n      const formattedAddress = [road, suburb, city, state, country].filter(Boolean).join(', ');\n      console.log(`‚úÖ Found address: ${formattedAddress}`);\n      return formattedAddress || 'Address not found';\n    } else {\n      throw new Error('No address found');\n    }\n  } catch (err) {\n    // Enhanced error logging\n    if (err.response) {\n      console.error('‚ùå Axios error response:', err.response);\n    } else {\n      console.error('‚ùå Error message:', err.message);\n    }\n    return 'Address not found';\n  }\n};","map":{"version":3,"names":["axios","getLocationFromCoords","lat","lng","_res$data","console","log","res","get","process","env","REACT_APP_API_URL","params","lon","data","address","road","suburb","city","state","country","formattedAddress","filter","Boolean","join","Error","err","response","error","message"],"sources":["C:/Users/janga divya/OneDrive/Desktop/hihi/src/utils/getLocationFromCoords.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nexport const getLocationFromCoords = async (lat, lng) => {\r\n  try {\r\n    console.log(`üìç Fetching address for: Latitude: ${lat}, Longitude: ${lng}`);\r\n\r\n    // Adjusted URL based on the correct API URL in the environment variable\r\n    const res = await axios.get(`${process.env.REACT_APP_API_URL}/api/reverse`, {\r\n      params: { lat, lon: lng }\r\n    });\r\n\r\n    console.log('üåç Full Response:', res.data);\r\n\r\n    // Check if address exists\r\n    if (res.data?.address) {\r\n      const { road, suburb, city, state, country } = res.data.address;\r\n      const formattedAddress = [road, suburb, city, state, country]\r\n        .filter(Boolean)\r\n        .join(', ');\r\n\r\n      console.log(`‚úÖ Found address: ${formattedAddress}`);\r\n      return formattedAddress || 'Address not found';\r\n    } else {\r\n      throw new Error('No address found');\r\n    }\r\n  } catch (err) {\r\n    // Enhanced error logging\r\n    if (err.response) {\r\n      console.error('‚ùå Axios error response:', err.response);\r\n    } else {\r\n      console.error('‚ùå Error message:', err.message);\r\n    }\r\n    return 'Address not found';\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,qBAAqB,GAAG,MAAAA,CAAOC,GAAG,EAAEC,GAAG,KAAK;EACvD,IAAI;IAAA,IAAAC,SAAA;IACFC,OAAO,CAACC,GAAG,CAAC,sCAAsCJ,GAAG,gBAAgBC,GAAG,EAAE,CAAC;;IAE3E;IACA,MAAMI,GAAG,GAAG,MAAMP,KAAK,CAACQ,GAAG,CAAC,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,cAAc,EAAE;MAC1EC,MAAM,EAAE;QAAEV,GAAG;QAAEW,GAAG,EAAEV;MAAI;IAC1B,CAAC,CAAC;IAEFE,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEC,GAAG,CAACO,IAAI,CAAC;;IAE1C;IACA,KAAAV,SAAA,GAAIG,GAAG,CAACO,IAAI,cAAAV,SAAA,eAARA,SAAA,CAAUW,OAAO,EAAE;MACrB,MAAM;QAAEC,IAAI;QAAEC,MAAM;QAAEC,IAAI;QAAEC,KAAK;QAAEC;MAAQ,CAAC,GAAGb,GAAG,CAACO,IAAI,CAACC,OAAO;MAC/D,MAAMM,gBAAgB,GAAG,CAACL,IAAI,EAAEC,MAAM,EAAEC,IAAI,EAAEC,KAAK,EAAEC,OAAO,CAAC,CAC1DE,MAAM,CAACC,OAAO,CAAC,CACfC,IAAI,CAAC,IAAI,CAAC;MAEbnB,OAAO,CAACC,GAAG,CAAC,oBAAoBe,gBAAgB,EAAE,CAAC;MACnD,OAAOA,gBAAgB,IAAI,mBAAmB;IAChD,CAAC,MAAM;MACL,MAAM,IAAII,KAAK,CAAC,kBAAkB,CAAC;IACrC;EACF,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZ;IACA,IAAIA,GAAG,CAACC,QAAQ,EAAE;MAChBtB,OAAO,CAACuB,KAAK,CAAC,yBAAyB,EAAEF,GAAG,CAACC,QAAQ,CAAC;IACxD,CAAC,MAAM;MACLtB,OAAO,CAACuB,KAAK,CAAC,kBAAkB,EAAEF,GAAG,CAACG,OAAO,CAAC;IAChD;IACA,OAAO,mBAAmB;EAC5B;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}